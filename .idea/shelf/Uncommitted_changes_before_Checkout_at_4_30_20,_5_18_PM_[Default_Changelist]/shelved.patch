Index: web/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"web URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/3.0/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.conf.urls.static import static\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nfrom web import settings\n\nurlpatterns = [\n    path('shopeaze-admin/', admin.site.urls),  # admin panel\n    path('accounts/', include('accounts.urls')),  # customer-accounts\n    path('', include('shop.urls')),  # shop\n    path('staff/', include('staffapp.urls')),  # staff\n    path('payments/', include('payments.urls')),  # payments\n    path('inventory-manager/', include('inventory.urls')),  # inventory\n    path('sellers/', include('sellers.urls')),  # inventory\n    path('mobile-pesa-api/v1/', include('mpesa_api.urls')),\n\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/urls.py	(revision ef0d12e213034c8bfe16370d280397ce55722625)
+++ web/urls.py	(date 1588256105910)
@@ -16,7 +16,7 @@
 from django.conf.urls.static import static
 from django.contrib import admin
 from django.urls import path, include
-
+from shop import views
 from web import settings
 
 urlpatterns = [
@@ -33,3 +33,7 @@
 
 if settings.DEBUG:
     urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
+
+
+handler404 = views.handler404
+handler500 = views.handler500
\ No newline at end of file
Index: web/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for web project.\n\nGenerated by 'django-admin startproject' using Django 3.0.3.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.0/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/3.0/ref/settings/\n\"\"\"\n\nimport os\n\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'gmt=m_6x$j2nkw4mjt47&!(fkcu49=n)#alfuw7^@ein(@uazb'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['127.0.0.1']\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'accounts.apps.AccountsConfig',\n    'inventory.apps.InventoryConfig',\n    'payments.apps.PaymentsConfig',\n    'shop.apps.ShopConfig',\n    'staffapp.apps.StaffappConfig',\n    'appAPI.apps.AppapiConfig',\n    'sellers.apps.SellersConfig',\n    'crispy_forms',\n    'mpesa_api.apps.MpesaApiConfig',\n\n]\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'web.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')]\n        ,\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'web.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'Indian/Antananarivo'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\n\nPROJECT_DIR = os.path.dirname(os.path.abspath(__file__))\nSTATIC_ROOT = os.path.join(PROJECT_DIR, 'static')\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = (os.path.join('static'),)\n# mailtrap to avoid sending emails to real email\nEMAIL_HOST = 'smtp.mailtrap.io'\nEMAIL_HOST_USER = '098f479a67cad6'\nEMAIL_HOST_PASSWORD = 'e9e4a58d6297d4'\nEMAIL_PORT = '2525'\nAUTH_USER_MODEL = 'accounts.User'\n\n# image and file uploads\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nSIGNING_BACKEND = 'django_cryptography.core.signing.TimestampSigner'\nLOGIN_REDIRECT_URL = 'customer-accounts:panel'\n# Extra lookup directories for collectstatic to find static files\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- web/settings.py	(revision ef0d12e213034c8bfe16370d280397ce55722625)
+++ web/settings.py	(date 1588255827862)
@@ -23,9 +23,9 @@
 SECRET_KEY = 'gmt=m_6x$j2nkw4mjt47&!(fkcu49=n)#alfuw7^@ein(@uazb'
 
 # SECURITY WARNING: don't run with debug turned on in production!
-DEBUG = True
+DEBUG = False
 
-ALLOWED_HOSTS = ['127.0.0.1']
+ALLOWED_HOSTS = ['*']
 
 # Application definition
 
Index: shop/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.decorators import login_required\nfrom django.core.mail import send_mail\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render, redirect, get_object_or_404\n# Create your views here.\nfrom django_cryptography.utils.crypto import get_random_string\n\nfrom accounts.forms import ContactUsForm\nfrom accounts.models import User, Profile\nfrom inventory.models import Inventory, Categories\nfrom mpesa_api.models import MpesaPayment\nfrom sellers.extras import split_domain_ports\nfrom sellers.models import Stores\nfrom shop.forms import QuantityForm, QuantityFormCuppy, SubscribeForm, SearchForm, SearchStoresForm, PaymentsForm\nfrom shop.models import Cart, WishList, Orders, OrderItems, CustomerData\nfrom staffapp.models import ContactMessages, Subscribers\n\n\ndef index(request):\n    subscribe_form = SubscribeForm()\n    search_form = SearchStoresForm()\n    products = Inventory.objects.all().order_by('id')[:12]\n    if request.user.is_authenticated:\n        cart_items = Cart.objects.filter(user=request.user.pk).count()\n    else:\n        cart_items = 0\n    fruits = Inventory.objects.filter(category=Categories.objects.get(name__contains='fruits')).order_by('time_added')[\n             :4]\n    vegies = Inventory.objects.filter(category=Categories.objects.get(name__contains='vegetables')).order_by(\n        'time_added')[:4]\n    spices = Inventory.objects.filter(category=Categories.objects.get(name__contains='spice')).order_by('time_added')[\n             :4]\n    household = Inventory.objects.filter(category=Categories.objects.get(name__contains='household')).order_by(\n        'time_added')[:4]\n    cereals = Inventory.objects.filter(category=Categories.objects.get(name__contains='cereals')).order_by(\n        'time_added')[:4]\n    sanitisers = Inventory.objects.filter(category=Categories.objects.get(name__contains='sanitizers')).order_by(\n        'time_added')[:4]\n    user_is_seller = User.objects.filter(pk=request.user.pk, user_type='seller').count()\n    user_is_staff = User.objects.filter(pk=request.user.pk, user_type='staff').count()\n\n    if user_is_seller > 0:\n        return redirect('sellers:panel')\n    elif user_is_staff > 0:\n        return redirect('staff:panel')\n    else:\n        stores = Stores.objects.all()\n        return render(request, 'shopeaze/index.html',\n                      {'products': products, 'fruits': fruits, 'vegetables': vegies, 'spices': spices,\n                       'household_items': household, 'cereals': cereals, 'sanitizers': sanitisers,\n                       'cart_count': cart_items,\n                       'subscribe_form': subscribe_form, 'formSearchShop': search_form, 'stores': stores})\n\n\n@login_required(login_url='customer-accounts:login')\ndef add_wish(request, hash):\n    print(\"in wishes\")\n    user = User.objects.get(pk=request.user.pk)\n    wishobj = WishList.objects.filter(user=user)\n    item = Inventory.objects.get(hash=hash)\n    if wishobj:\n        print(\"user has wishes\")\n        # if users wishlist exists\n        obj = WishList.objects.filter(user=user, item=item)\n        if obj:\n            #     if object exists in wishlist\n            pass\n        else:\n            print(\"create objects in wishes\")\n            # object does not exist in wishlist\n            wishobj = WishList.objects.create(user=user, item=item)\n\n    else:\n        # user wishlist does not exist\n        print(\"create user wishes and add wish\")\n        wishobj = WishList.objects.create(user=user, item=item)\n    return redirect(\"shop:index\")\n\n\n@login_required(login_url='customer-accounts:login')\ndef delete_wish(request, hash):\n    user = User.objects.get(pk=request.user.pk)\n    item = Inventory.objects.get(hash=hash)\n    remove_item = WishList.objects.filter(user=user, item=item)\n    remove_item.delete()\n\n    return redirect(\"shop:wishlist\")\n\n\n@login_required(login_url='customer-accounts:login')\ndef wishlist(request):\n    subscribe_form = SubscribeForm()\n\n    if request.user.is_authenticated:\n        cart_items = Cart.objects.filter(user=request.user.pk).count()\n    else:\n        cart_items = 0\n    wishes = WishList.objects.filter(user=request.user.pk)\n    user_is_seller = User.objects.filter(pk=request.user.pk, user_type='seller').count()\n    if user_is_seller > 0:\n        return redirect('sellers:panel')\n    else:\n        return render(request, 'shopeaze/wishlist.html',\n                      {'wishes': wishes, 'cart_count': cart_items, 'subscribe_form': subscribe_form})\n\n\ndef product(request, hash):\n    user = User.objects.get(pk=request.user.pk)\n    subscribe_form = SubscribeForm()\n    if request.user.is_authenticated:\n        cart_items = Cart.objects.filter(user=request.user.pk).count()\n    else:\n        cart_items = 0\n    form = QuantityForm()\n    product_details = get_object_or_404(Inventory, hash=hash)\n    user_is_seller = User.objects.filter(pk=request.user.pk, user_type='seller').count()\n    if user_is_seller > 0:\n        return redirect('sellers:panel')\n    else:\n        cust_data_add = CustomerData.objects.create(customer=user, item_name=product_details.item_name, action='Viewed')\n        return render(request, 'shopeaze/product-single.html',\n                      {'product': product_details, 'form': form, 'cart_count': cart_items,\n                       'subscribe_form': subscribe_form})\n\n\n# 198919\n@login_required(login_url='customer-accounts:login')\ndef cart(request):\n    subscribe_form = SubscribeForm()\n    if request.user.is_authenticated:\n        cart_items = Cart.objects.filter(user=request.user.pk).count()\n    else:\n        cart_items = 0\n    cart = Cart.objects.filter(user=request.user.pk)\n    cart_total = 0\n    for x in cart:\n        cart_total += x.price\n    user_is_seller = User.objects.filter(pk=request.user.pk, user_type='seller').count()\n    if user_is_seller > 0:\n        return redirect('sellers:panel')\n    else:\n        return render(request, 'shopeaze/cart.html',\n                      {'cart': cart, 'sum': cart_total, 'cart_count': cart_items, 'subscribe_form': subscribe_form})\n\n\n@login_required(login_url='customer-accounts:login')\ndef checkout(request):\n    # check if delivery profile is set and redirect to user profile creation or checkout page if it is available\n    user = User.objects.get(pk=request.user.pk)\n    user_profile = Profile.objects.filter(user=user)\n    cart_items = Cart.objects.filter(user=user)\n\n    if user_profile.count() > 0:\n        #     exists move to checkout\n        subscribe_form = SubscribeForm()\n\n        if request.user.is_authenticated:\n            cart_items_count = Cart.objects.filter(user=request.user.pk).count()\n        else:\n            cart_items_count = 0\n        payment_method_form = PaymentsForm()\n        user_is_seller = User.objects.filter(pk=request.user.pk, user_type='seller').count()\n        if user_is_seller > 0:\n            return redirect('sellers:panel')\n        else:\n            cart_total = 0\n            for x in cart_items:\n                cart_total += x.price\n            return render(request, 'shopeaze/checkout.html',\n                          {'cart_count': cart_items_count, 'subscribe_form': subscribe_form, 'cart_sum': cart_total,\n                           'paymentsform': payment_method_form,\n                           'user': user, 'user_profile': user_profile})\n\n    else:\n        #     create profile\n        return redirect('customer-accounts:createprofile')\n\n\ndef about(request):\n    subscribe_form = SubscribeForm()\n\n    if request.user.is_authenticated:\n        cart_items = Cart.objects.filter(user=request.user.pk).count()\n    else:\n        cart_items = 0\n    user_is_seller = User.objects.filter(pk=request.user.pk, user_type='seller').count()\n    if user_is_seller > 0:\n        return redirect('sellers:panel')\n    else:\n        return render(request, 'shopeaze/about.html', {'cart_count': cart_items, 'subscribe_form': subscribe_form})\n\n\ndef contact(request):\n    subscribe_form = SubscribeForm()\n\n    if request.user.is_authenticated:\n        cart_items = Cart.objects.filter(user=request.user.pk).count()\n    else:\n        cart_items = 0\n    form = ContactUsForm()\n    if request.method == 'POST':\n        form = ContactUsForm(request.POST)\n        if form.is_valid():\n            sender_mail = form.cleaned_data['sender_mail']\n            sender_name = form.cleaned_data['sender_name']\n            message = \"From:\" + sender_name + form.cleaned_data['mail_message']\n            subject = form.cleaned_data['mail_subject']\n            # EmailMessage()\n            send_mail(from_email=sender_mail, recipient_list=['info@' + split_domain_ports(request.get_host()),\n                                                              ], subject=subject,\n                      message=message)\n            new_msg = ContactMessages.objects.create(sender_mail=sender_mail, sender_name=sender_name,\n                                                     mail_message=message, mail_subject=subject)\n            return redirect('shop:contact-us')\n\n    return render(request, 'shopeaze/contact.html',\n                  {'cart_count': cart_items, 'form': form, 'subscribe_form': subscribe_form})\n\n\ndef login(request):\n    if request.user.is_authenticated:\n        cart_items = Cart.objects.filter(user=request.user.pk).count()\n    else:\n        cart_items = 0\n    return redirect('customer-accounts:login')\n\n\n@login_required(login_url='customer-accounts:login')\ndef categories(request, storehash, categorypk):\n    subscribe_form = SubscribeForm()\n\n    if request.user.is_authenticated:\n        cart_items = Cart.objects.filter(user=request.user.pk).count()\n    else:\n        cart_items = 0\n    owner = Stores.objects.get(hash=storehash)\n    products = Inventory.objects.filter(category=categorypk, owner=owner)\n    cat = get_object_or_404(Categories, pk=categorypk)\n    user_is_seller = User.objects.filter(pk=request.user.pk, user_type='seller').count()\n    if user_is_seller > 0:\n        return redirect('sellers:panel')\n    else:\n        cart_items = Cart.objects.filter(user=request.user.pk).count()\n        return render(request, 'shopeaze/categories.html',\n                      {'products': products, 'cart_count': cart_items, 'category': cat,\n                       'subscribe_form': subscribe_form})\n\n\n@login_required(login_url='customer-accounts:login')\ndef remove_from_cart(request, pk):\n    # removing from cart\n    if request.user.is_authenticated:\n        cart_items = Cart.objects.filter(user=request.user.pk).count()\n    else:\n        cart_items = 0\n    user = User.objects.get(pk=request.user.pk)\n    item = Inventory.objects.get(pk=pk)\n    remove_item = Cart.objects.filter(user=user, item=item)\n    cust_data_add = CustomerData.objects.create(customer=user, item_name=item.item_name, action='Removed from cart')\n\n    remove_item.delete()\n    return redirect('shop:cart')\n\n\n@login_required(login_url='customer-accounts:login')\ndef cuppy_add(request, pk):\n    if request.user.is_authenticated:\n        cart_items = Cart.objects.filter(user=request.user.pk).count()\n    else:\n        cart_items = 0\n    print(\"cuppy add to cart\")\n    if request.method == 'POST':\n        print(\"post\")\n        if request.user.is_authenticated:\n            form = QuantityFormCuppy(request.POST)\n            print(form.errors)\n            if form.is_valid():\n\n                qty = form.cleaned_data['qty']\n                print(\"{} is the quantity\".format(qty))\n                user = User.objects.get(pk=request.user.pk)\n                cartobj = Cart.objects.filter(user=user)\n                item = Inventory.objects.get(pk=pk)\n                cust_data_add = CustomerData.objects.create(customer=user, item_name=item.item_name,\n                                                            action='Added to cart')\n\n                if cartobj:\n                    # if users cart exists\n                    obj = Cart.objects.filter(user=user, item=item, store=item.owner)\n                    if obj:\n                        #     if object exists in cart\n                        obj.delete()\n                        cartobj = Cart.objects.create(user=user, qty=qty, item=item, store=item.owner)\n\n                        # obj.save()\n                    else:\n                        # object does not exist in cart\n                        cartobj = Cart.objects.create(user=user, qty=qty, item=item, store=item.owner)\n\n                else:\n                    # user cart does not exist\n                    cartobj = Cart.objects.create(user=user, qty=qty, item=item, store=item.owner)\n            else:\n                print(\"invalid form\")\n    else:\n        return redirect('shop:login')\n    next = request.POST.get('next', '/')\n    print(\"redirection\")\n    return HttpResponseRedirect(next)\n\n\n@login_required(login_url='customer-accounts:login')\ndef single_add(request, pk):\n    user = User.objects.get(pk=request.user.pk)\n    cartobj = Cart.objects.filter(user=user)\n    item = Inventory.objects.get(pk=pk)\n    if cartobj:\n        # if users cart exists\n        obj = Cart.objects.filter(user=user, item=item, store=item.owner)\n        qty = obj.model.qty + 1\n        if obj:\n            #     if object exists in cart\n            obj.update(qty=qty)\n            # obj.save()\n        else:\n            # object does not exist in cart\n            cartobj = Cart.objects.create(user=user, qty=1, item=item)\n\n    else:\n        # user cart does not exist\n        cartobj = Cart.objects.create(user=user, qty=1, item=item)\n    return redirect(\"shop:index\")\n\n\ndef subscribe(request):\n    if request.method == 'POST':\n        form = SubscribeForm(request.POST)\n        if form.is_valid():\n            mail = form.cleaned_data['email']\n\n            check_if_exists = Subscribers.objects.filter(email=mail)\n            if check_if_exists:\n                pass\n            else:\n                create_subscriber = Subscribers.objects.create(email=mail)\n    next = request.POST.get('next', '/')\n    print(\"redirection\")\n    return HttpResponseRedirect(next)\n\n\n@login_required(login_url='customer-accounts:login')\ndef search(request):\n    subscribe_form = SubscribeForm()\n    search_form = SearchForm()\n    if request.user.is_authenticated:\n        cart_items = Cart.objects.filter(user=request.user.pk).count()\n    else:\n        cart_items = 0\n    user_is_seller = User.objects.filter(pk=request.user.pk, user_type='seller').count()\n    if user_is_seller > 0:\n        return redirect('sellers:panel')\n    else:\n        if request.method == 'POST':\n            form = SearchForm(request.POST)\n            if form.is_valid():\n                name = form.cleaned_data['item']\n                items = Inventory.objects.filter(item_name__icontains=name)\n                store = request.POST.get('store')\n                store_details = Stores.objects.get(name__exact=store)\n                return render(request, 'shopeaze/products_searched.html',\n                              {'store': store_details, 'products': items, 'cart_count': cart_items,\n                               'subscribe_form': subscribe_form,\n                               'search_form': search_form})\n\n\ndef searchstores(request):\n    subscribe_form = SubscribeForm()\n    search_form = SearchStoresForm()\n    if request.user.is_authenticated:\n        cart_items = Cart.objects.filter(user=request.user.pk).count()\n    else:\n        cart_items = 0\n    user_is_seller = User.objects.filter(pk=request.user.pk, user_type='seller').count()\n    if user_is_seller > 0:\n        return redirect('sellers:panel')\n    else:\n        if request.method == 'POST':\n            form = SearchStoresForm(request.POST)\n            if form.is_valid():\n                name = form.cleaned_data['store']\n                items = Stores.objects.filter(town__icontains=name)\n\n                return render(request, 'shopeaze/shops.html', {'stores': items, 'cart_count': cart_items,\n                                                               'subscribe_form': subscribe_form,\n                                                               'formSearchShop': search_form})\n        else:\n            items = Stores.objects.all()\n\n            return render(request, 'shopeaze/shops.html', {'stores': items, 'cart_count': cart_items,\n                                                           'subscribe_form': subscribe_form,\n                                                           'formSearchShop': search_form})\n\n\n# handles mpesa payments\n@login_required(login_url='customer-accounts:login')\ndef payment_actions(request):\n    if request.method == 'POST':\n        form = PaymentsForm(request.POST)\n        if form.is_valid():\n            method = form.cleaned_data['payment_choices']\n            if method == 'mpesastk':\n                return redirect('mpesa-api:lipa_na_mpesa')\n            elif method == 'cash':\n                return redirect('payments:payments-cash')\n            elif method == 'mpesatill':\n                print('mpesa till payments')\n        else:\n            print(form.errors)\n    else:\n        print('not post')\n    return None\n\n\ndef create_order(request=None, mode=None):\n    store = None\n    user = User.objects.get(pk=request.user.pk)\n    cart_item_one = Cart.objects.filter(user=user)\n    if cart_item_one.count() > 0:\n        for x in cart_item_one:\n            store = x.store\n\n    if mode == 'MPESA':\n        payment = MpesaPayment.objects.get(merchant_request_id=request.session.get('mpesa_request_id'))\n        order_string = payment.order_id\n        new_order = Orders.objects.create(order_string=order_string, paid=True, payment_mode=mode, store=store,\n                                          user=user)\n\n    elif mode == 'CASH':\n        order_string = get_random_string(length=10)\n        new_order = Orders.objects.create(order_string=order_string, payment_mode=mode, store=store, user=user)\n    send_mail(\"New Order\", message='New Order:' + order_string, from_email=user.email,\n              recipient_list=[store.email, store.admin.email, 'info@' + split_domain_ports(request.get_host()),\n                              ])\n    # fixme email template with this message\n    remove_cart(request, user, order_string)\n\n\ndef remove_cart(request, user, order_string):\n    # get order id\n    order = Orders.objects.get(order_string=order_string)\n    # create order items\n\n    cart_items = Cart.objects.filter(user=user)\n    # transfer cart items to order\n    for item in cart_items:\n        new_order_item = OrderItems.objects.create(order=order, quantity=item.qty, item=item.item)\n\n    # delete cart\n    cart_items.delete()\n\n\n@login_required(login_url='customer-accounts:login')\ndef mpesa_loading(request):\n    return render(request, 'shopeaze/payments/mpesa-waiting.html')\n\n\n@login_required(login_url='customer-accounts:login')\ndef mobile_pesa_done(request):\n    user = User.objects.get(pk=request.user.pk)\n    print('{} is the merchant id'.format(request.session.get('mpesa_request_id')))\n    payment = MpesaPayment.objects.filter(merchant_request_id=request.session.get('mpesa_request_id'))\n    if payment.count() > 0:\n        payment.update(customer=user, confirmation_status=True)\n        orderString = [x.order_id for x in payment][0]\n        # create order\n        create_order(request=request, mode='Mpesa')\n        return render(request, 'shopeaze/payments/order-done.html')\n\n    else:\n        return redirect('shop:mpesa_loading')\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- shop/views.py	(revision ef0d12e213034c8bfe16370d280397ce55722625)
+++ shop/views.py	(date 1588256240666)
@@ -478,3 +478,10 @@
 
     else:
         return redirect('shop:mpesa_loading')
+
+
+
+def handler404(request,exception):
+    return render(request, '404.html', status=404)
+def handler500(request):
+    return render(request, '500.html', status=500)
\ No newline at end of file
Index: templates/500.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/500.html	(date 1588256105922)
+++ templates/500.html	(date 1588256105922)
@@ -0,0 +1,1 @@
+error 500
\ No newline at end of file
Index: templates/404.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/404.html	(date 1588256105898)
+++ templates/404.html	(date 1588256105898)
@@ -0,0 +1,1 @@
+error 404
\ No newline at end of file
